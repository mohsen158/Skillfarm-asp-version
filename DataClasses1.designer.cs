#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="skillf")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertacceptance(acceptance instance);
    partial void Updateacceptance(acceptance instance);
    partial void Deleteacceptance(acceptance instance);
    partial void Insertambiguity_user_work(ambiguity_user_work instance);
    partial void Updateambiguity_user_work(ambiguity_user_work instance);
    partial void Deleteambiguity_user_work(ambiguity_user_work instance);
    partial void Insertambiguity(ambiguity instance);
    partial void Updateambiguity(ambiguity instance);
    partial void Deleteambiguity(ambiguity instance);
    partial void Insertapplicant(applicant instance);
    partial void Updateapplicant(applicant instance);
    partial void Deleteapplicant(applicant instance);
    partial void Insertcourse_user(course_user instance);
    partial void Updatecourse_user(course_user instance);
    partial void Deletecourse_user(course_user instance);
    partial void Insertcourse(course instance);
    partial void Updatecourse(course instance);
    partial void Deletecourse(course instance);
    partial void Insertdepartment(department instance);
    partial void Updatedepartment(department instance);
    partial void Deletedepartment(department instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertwork(work instance);
    partial void Updatework(work instance);
    partial void Deletework(work instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["skillfConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<acceptance> acceptances
		{
			get
			{
				return this.GetTable<acceptance>();
			}
		}
		
		public System.Data.Linq.Table<ambiguity_user_work> ambiguity_user_works
		{
			get
			{
				return this.GetTable<ambiguity_user_work>();
			}
		}
		
		public System.Data.Linq.Table<ambiguity> ambiguities
		{
			get
			{
				return this.GetTable<ambiguity>();
			}
		}
		
		public System.Data.Linq.Table<applicant> applicants
		{
			get
			{
				return this.GetTable<applicant>();
			}
		}
		
		public System.Data.Linq.Table<course_user> course_users
		{
			get
			{
				return this.GetTable<course_user>();
			}
		}
		
		public System.Data.Linq.Table<course> courses
		{
			get
			{
				return this.GetTable<course>();
			}
		}
		
		public System.Data.Linq.Table<department> departments
		{
			get
			{
				return this.GetTable<department>();
			}
		}
		
		public System.Data.Linq.Table<password_reset> password_resets
		{
			get
			{
				return this.GetTable<password_reset>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<worklog> worklogs
		{
			get
			{
				return this.GetTable<worklog>();
			}
		}
		
		public System.Data.Linq.Table<work> works
		{
			get
			{
				return this.GetTable<work>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.acceptances")]
	public partial class acceptance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _detail;
		
		private System.DateTime _dead_time;
		
		private int _cost;
		
		private int _user_id;
		
		private int _work_id;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndetailChanging(string value);
    partial void OndetailChanged();
    partial void Ondead_timeChanging(System.DateTime value);
    partial void Ondead_timeChanged();
    partial void OncostChanging(int value);
    partial void OncostChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onwork_idChanging(int value);
    partial void Onwork_idChanged();
    #endregion
		
		public acceptance()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detail", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string detail
		{
			get
			{
				return this._detail;
			}
			set
			{
				if ((this._detail != value))
				{
					this.OndetailChanging(value);
					this.SendPropertyChanging();
					this._detail = value;
					this.SendPropertyChanged("detail");
					this.OndetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dead_time", DbType="DateTime NOT NULL")]
		public System.DateTime dead_time
		{
			get
			{
				return this._dead_time;
			}
			set
			{
				if ((this._dead_time != value))
				{
					this.Ondead_timeChanging(value);
					this.SendPropertyChanging();
					this._dead_time = value;
					this.SendPropertyChanged("dead_time");
					this.Ondead_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Int NOT NULL")]
		public int cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_work_id", DbType="Int NOT NULL")]
		public int work_id
		{
			get
			{
				return this._work_id;
			}
			set
			{
				if ((this._work_id != value))
				{
					this.Onwork_idChanging(value);
					this.SendPropertyChanging();
					this._work_id = value;
					this.SendPropertyChanged("work_id");
					this.Onwork_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_acceptance", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.acceptances.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.acceptances.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ambiguity_user_work")]
	public partial class ambiguity_user_work : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private int _work_id;
		
		private int _ambiguity_id;
		
		private EntityRef<ambiguity> _ambiguity;
		
		private EntityRef<user> _user;
		
		private EntityRef<work> _work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onwork_idChanging(int value);
    partial void Onwork_idChanged();
    partial void Onambiguity_idChanging(int value);
    partial void Onambiguity_idChanged();
    #endregion
		
		public ambiguity_user_work()
		{
			this._ambiguity = default(EntityRef<ambiguity>);
			this._user = default(EntityRef<user>);
			this._work = default(EntityRef<work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_work_id", DbType="Int NOT NULL")]
		public int work_id
		{
			get
			{
				return this._work_id;
			}
			set
			{
				if ((this._work_id != value))
				{
					if (this._work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwork_idChanging(value);
					this.SendPropertyChanging();
					this._work_id = value;
					this.SendPropertyChanged("work_id");
					this.Onwork_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ambiguity_id", DbType="Int NOT NULL")]
		public int ambiguity_id
		{
			get
			{
				return this._ambiguity_id;
			}
			set
			{
				if ((this._ambiguity_id != value))
				{
					if (this._ambiguity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onambiguity_idChanging(value);
					this.SendPropertyChanging();
					this._ambiguity_id = value;
					this.SendPropertyChanged("ambiguity_id");
					this.Onambiguity_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ambiguity_ambiguity_user_work", Storage="_ambiguity", ThisKey="ambiguity_id", OtherKey="id", IsForeignKey=true)]
		public ambiguity ambiguity
		{
			get
			{
				return this._ambiguity.Entity;
			}
			set
			{
				ambiguity previousValue = this._ambiguity.Entity;
				if (((previousValue != value) 
							|| (this._ambiguity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ambiguity.Entity = null;
						previousValue.ambiguity_user_works.Remove(this);
					}
					this._ambiguity.Entity = value;
					if ((value != null))
					{
						value.ambiguity_user_works.Add(this);
						this._ambiguity_id = value.id;
					}
					else
					{
						this._ambiguity_id = default(int);
					}
					this.SendPropertyChanged("ambiguity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_ambiguity_user_work", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.ambiguity_user_works.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.ambiguity_user_works.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="work1_ambiguity_user_work", Storage="_work", ThisKey="work_id", OtherKey="id", IsForeignKey=true)]
		public work work
		{
			get
			{
				return this._work.Entity;
			}
			set
			{
				work previousValue = this._work.Entity;
				if (((previousValue != value) 
							|| (this._work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._work.Entity = null;
						previousValue.ambiguity_user_works.Remove(this);
					}
					this._work.Entity = value;
					if ((value != null))
					{
						value.ambiguity_user_works.Add(this);
						this._work_id = value.id;
					}
					else
					{
						this._work_id = default(int);
					}
					this.SendPropertyChanged("work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ambiguitys")]
	public partial class ambiguity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<ambiguity_user_work> _ambiguity_user_works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ambiguity()
		{
			this._ambiguity_user_works = new EntitySet<ambiguity_user_work>(new Action<ambiguity_user_work>(this.attach_ambiguity_user_works), new Action<ambiguity_user_work>(this.detach_ambiguity_user_works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ambiguity_ambiguity_user_work", Storage="_ambiguity_user_works", ThisKey="id", OtherKey="ambiguity_id")]
		public EntitySet<ambiguity_user_work> ambiguity_user_works
		{
			get
			{
				return this._ambiguity_user_works;
			}
			set
			{
				this._ambiguity_user_works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ambiguity_user_works(ambiguity_user_work entity)
		{
			this.SendPropertyChanging();
			entity.ambiguity = this;
		}
		
		private void detach_ambiguity_user_works(ambiguity_user_work entity)
		{
			this.SendPropertyChanging();
			entity.ambiguity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.applicants")]
	public partial class applicant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private int _work_id;
		
		private string _detail;
		
		private System.Nullable<System.TimeSpan> _dead_time;
		
		private System.Nullable<int> _cost;
		
		private EntityRef<user> _user;
		
		private EntityRef<work> _work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onwork_idChanging(int value);
    partial void Onwork_idChanged();
    partial void OndetailChanging(string value);
    partial void OndetailChanged();
    partial void Ondead_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Ondead_timeChanged();
    partial void OncostChanging(System.Nullable<int> value);
    partial void OncostChanged();
    #endregion
		
		public applicant()
		{
			this._user = default(EntityRef<user>);
			this._work = default(EntityRef<work>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_work_id", DbType="Int NOT NULL")]
		public int work_id
		{
			get
			{
				return this._work_id;
			}
			set
			{
				if ((this._work_id != value))
				{
					if (this._work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onwork_idChanging(value);
					this.SendPropertyChanging();
					this._work_id = value;
					this.SendPropertyChanged("work_id");
					this.Onwork_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detail", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string detail
		{
			get
			{
				return this._detail;
			}
			set
			{
				if ((this._detail != value))
				{
					this.OndetailChanging(value);
					this.SendPropertyChanging();
					this._detail = value;
					this.SendPropertyChanged("detail");
					this.OndetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dead_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> dead_time
		{
			get
			{
				return this._dead_time;
			}
			set
			{
				if ((this._dead_time != value))
				{
					this.Ondead_timeChanging(value);
					this.SendPropertyChanging();
					this._dead_time = value;
					this.SendPropertyChanged("dead_time");
					this.Ondead_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Int")]
		public System.Nullable<int> cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_applicant", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.applicants.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.applicants.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="work1_applicant", Storage="_work", ThisKey="work_id", OtherKey="id", IsForeignKey=true)]
		public work work
		{
			get
			{
				return this._work.Entity;
			}
			set
			{
				work previousValue = this._work.Entity;
				if (((previousValue != value) 
							|| (this._work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._work.Entity = null;
						previousValue.applicants.Remove(this);
					}
					this._work.Entity = value;
					if ((value != null))
					{
						value.applicants.Add(this);
						this._work_id = value.id;
					}
					else
					{
						this._work_id = default(int);
					}
					this.SendPropertyChanged("work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course_user")]
	public partial class course_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Data.Linq.Binary _created_at;
		
		private int _user_id;
		
		private int _course_id;
		
		private EntityRef<course> _course;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncreated_atChanging(System.Data.Linq.Binary value);
    partial void Oncreated_atChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Oncourse_idChanging(int value);
    partial void Oncourse_idChanged();
    #endregion
		
		public course_user()
		{
			this._course = default(EntityRef<course>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_id", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_course_user", Storage="_course", ThisKey="course_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.course_users.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.course_users.Add(this);
						this._course_id = value.id;
					}
					else
					{
						this._course_id = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_course_user", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.course_users.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.course_users.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.courses")]
	public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _department_id;
		
		private EntitySet<course_user> _course_users;
		
		private EntitySet<work> _works;
		
		private EntityRef<department> _department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Ondepartment_idChanging(int value);
    partial void Ondepartment_idChanged();
    #endregion
		
		public course()
		{
			this._course_users = new EntitySet<course_user>(new Action<course_user>(this.attach_course_users), new Action<course_user>(this.detach_course_users));
			this._works = new EntitySet<work>(new Action<work>(this.attach_works), new Action<work>(this.detach_works));
			this._department = default(EntityRef<department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_department_id", DbType="Int NOT NULL")]
		public int department_id
		{
			get
			{
				return this._department_id;
			}
			set
			{
				if ((this._department_id != value))
				{
					if (this._department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondepartment_idChanging(value);
					this.SendPropertyChanging();
					this._department_id = value;
					this.SendPropertyChanged("department_id");
					this.Ondepartment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_course_user", Storage="_course_users", ThisKey="id", OtherKey="course_id")]
		public EntitySet<course_user> course_users
		{
			get
			{
				return this._course_users;
			}
			set
			{
				this._course_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_work1", Storage="_works", ThisKey="id", OtherKey="course_id")]
		public EntitySet<work> works
		{
			get
			{
				return this._works;
			}
			set
			{
				this._works.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="department_course", Storage="_department", ThisKey="department_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public department department
		{
			get
			{
				return this._department.Entity;
			}
			set
			{
				department previousValue = this._department.Entity;
				if (((previousValue != value) 
							|| (this._department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._department.Entity = null;
						previousValue.courses.Remove(this);
					}
					this._department.Entity = value;
					if ((value != null))
					{
						value.courses.Add(this);
						this._department_id = value.id;
					}
					else
					{
						this._department_id = default(int);
					}
					this.SendPropertyChanged("department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_course_users(course_user entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_course_users(course_user entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
		
		private void attach_works(work entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_works(work entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.departments")]
	public partial class department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Data.Linq.Binary _created_at;
		
		private EntitySet<course> _courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncreated_atChanging(System.Data.Linq.Binary value);
    partial void Oncreated_atChanged();
    #endregion
		
		public department()
		{
			this._courses = new EntitySet<course>(new Action<course>(this.attach_courses), new Action<course>(this.detach_courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="department_course", Storage="_courses", ThisKey="id", OtherKey="department_id")]
		public EntitySet<course> courses
		{
			get
			{
				return this._courses;
			}
			set
			{
				this._courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.department = this;
		}
		
		private void detach_courses(course entity)
		{
			this.SendPropertyChanging();
			entity.department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.password_resets")]
	public partial class password_reset
	{
		
		private string _email;
		
		private string _token;
		
		private System.Data.Linq.Binary _created_at;
		
		public password_reset()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_token", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string token
		{
			get
			{
				return this._token;
			}
			set
			{
				if ((this._token != value))
				{
					this._token = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this._created_at = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _remember_token;
		
		private EntitySet<acceptance> _acceptances;
		
		private EntitySet<ambiguity_user_work> _ambiguity_user_works;
		
		private EntitySet<applicant> _applicants;
		
		private EntitySet<course_user> _course_users;
		
		private EntitySet<work> _works;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onremember_tokenChanging(string value);
    partial void Onremember_tokenChanged();
    #endregion
		
		public user()
		{
			this._acceptances = new EntitySet<acceptance>(new Action<acceptance>(this.attach_acceptances), new Action<acceptance>(this.detach_acceptances));
			this._ambiguity_user_works = new EntitySet<ambiguity_user_work>(new Action<ambiguity_user_work>(this.attach_ambiguity_user_works), new Action<ambiguity_user_work>(this.detach_ambiguity_user_works));
			this._applicants = new EntitySet<applicant>(new Action<applicant>(this.attach_applicants), new Action<applicant>(this.detach_applicants));
			this._course_users = new EntitySet<course_user>(new Action<course_user>(this.attach_course_users), new Action<course_user>(this.detach_course_users));
			this._works = new EntitySet<work>(new Action<work>(this.attach_works), new Action<work>(this.detach_works));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remember_token", DbType="VarChar(100)")]
		public string remember_token
		{
			get
			{
				return this._remember_token;
			}
			set
			{
				if ((this._remember_token != value))
				{
					this.Onremember_tokenChanging(value);
					this.SendPropertyChanging();
					this._remember_token = value;
					this.SendPropertyChanged("remember_token");
					this.Onremember_tokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_acceptance", Storage="_acceptances", ThisKey="id", OtherKey="user_id")]
		public EntitySet<acceptance> acceptances
		{
			get
			{
				return this._acceptances;
			}
			set
			{
				this._acceptances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_ambiguity_user_work", Storage="_ambiguity_user_works", ThisKey="id", OtherKey="user_id")]
		public EntitySet<ambiguity_user_work> ambiguity_user_works
		{
			get
			{
				return this._ambiguity_user_works;
			}
			set
			{
				this._ambiguity_user_works.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_applicant", Storage="_applicants", ThisKey="id", OtherKey="user_id")]
		public EntitySet<applicant> applicants
		{
			get
			{
				return this._applicants;
			}
			set
			{
				this._applicants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_course_user", Storage="_course_users", ThisKey="id", OtherKey="user_id")]
		public EntitySet<course_user> course_users
		{
			get
			{
				return this._course_users;
			}
			set
			{
				this._course_users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_work1", Storage="_works", ThisKey="id", OtherKey="user_id")]
		public EntitySet<work> works
		{
			get
			{
				return this._works;
			}
			set
			{
				this._works.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_acceptances(acceptance entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_acceptances(acceptance entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_ambiguity_user_works(ambiguity_user_work entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_ambiguity_user_works(ambiguity_user_work entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_applicants(applicant entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_applicants(applicant entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_course_users(course_user entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_course_users(course_user entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_works(work entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_works(work entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.worklog")]
	public partial class worklog
	{
		
		private int _id;
		
		private string _subject;
		
		private string _detail;
		
		private string _status;
		
		private System.DateTime _dead_time;
		
		private int _user_id;
		
		private int _course_id;
		
		private string _type;
		
		public worklog()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this._subject = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detail", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string detail
		{
			get
			{
				return this._detail;
			}
			set
			{
				if ((this._detail != value))
				{
					this._detail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dead_time", DbType="DateTime NOT NULL")]
		public System.DateTime dead_time
		{
			get
			{
				return this._dead_time;
			}
			set
			{
				if ((this._dead_time != value))
				{
					this._dead_time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this._user_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_id", DbType="Int NOT NULL")]
		public int course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					this._course_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(5)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this._type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.works")]
	public partial class work : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _subject;
		
		private string _detail;
		
		private string _status;
		
		private System.DateTime _dead_time;
		
		private int _user_id;
		
		private int _course_id;
		
		private System.Nullable<int> _Approve;
		
		private EntitySet<ambiguity_user_work> _ambiguity_user_works;
		
		private EntitySet<applicant> _applicants;
		
		private EntityRef<course> _course;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OndetailChanging(string value);
    partial void OndetailChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void Ondead_timeChanging(System.DateTime value);
    partial void Ondead_timeChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Oncourse_idChanging(int value);
    partial void Oncourse_idChanged();
    partial void OnApproveChanging(System.Nullable<int> value);
    partial void OnApproveChanged();
    #endregion
		
		public work()
		{
			this._ambiguity_user_works = new EntitySet<ambiguity_user_work>(new Action<ambiguity_user_work>(this.attach_ambiguity_user_works), new Action<ambiguity_user_work>(this.detach_ambiguity_user_works));
			this._applicants = new EntitySet<applicant>(new Action<applicant>(this.attach_applicants), new Action<applicant>(this.detach_applicants));
			this._course = default(EntityRef<course>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detail", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string detail
		{
			get
			{
				return this._detail;
			}
			set
			{
				if ((this._detail != value))
				{
					this.OndetailChanging(value);
					this.SendPropertyChanging();
					this._detail = value;
					this.SendPropertyChanged("detail");
					this.OndetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dead_time", DbType="DateTime NOT NULL")]
		public System.DateTime dead_time
		{
			get
			{
				return this._dead_time;
			}
			set
			{
				if ((this._dead_time != value))
				{
					this.Ondead_timeChanging(value);
					this.SendPropertyChanging();
					this._dead_time = value;
					this.SendPropertyChanged("dead_time");
					this.Ondead_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course_id", DbType="Int NOT NULL")]
		public int course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approve", DbType="Int")]
		public System.Nullable<int> Approve
		{
			get
			{
				return this._Approve;
			}
			set
			{
				if ((this._Approve != value))
				{
					this.OnApproveChanging(value);
					this.SendPropertyChanging();
					this._Approve = value;
					this.SendPropertyChanged("Approve");
					this.OnApproveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="work1_ambiguity_user_work", Storage="_ambiguity_user_works", ThisKey="id", OtherKey="work_id")]
		public EntitySet<ambiguity_user_work> ambiguity_user_works
		{
			get
			{
				return this._ambiguity_user_works;
			}
			set
			{
				this._ambiguity_user_works.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="work1_applicant", Storage="_applicants", ThisKey="id", OtherKey="work_id")]
		public EntitySet<applicant> applicants
		{
			get
			{
				return this._applicants;
			}
			set
			{
				this._applicants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_work1", Storage="_course", ThisKey="course_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.works.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.works.Add(this);
						this._course_id = value.id;
					}
					else
					{
						this._course_id = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_work1", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.works.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.works.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ambiguity_user_works(ambiguity_user_work entity)
		{
			this.SendPropertyChanging();
			entity.work = this;
		}
		
		private void detach_ambiguity_user_works(ambiguity_user_work entity)
		{
			this.SendPropertyChanging();
			entity.work = null;
		}
		
		private void attach_applicants(applicant entity)
		{
			this.SendPropertyChanging();
			entity.work = this;
		}
		
		private void detach_applicants(applicant entity)
		{
			this.SendPropertyChanging();
			entity.work = null;
		}
	}
}
#pragma warning restore 1591
